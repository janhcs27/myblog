<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title></title>
    <link>//localhost:1313/</link>
    <description>Recent content on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="//localhost:1313/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>//localhost:1313/certtool/test4/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/certtool/test4/</guid>
      <description>&lt;!DOCTYPE html&gt;&#xA;&lt;html&gt;&#xA;&lt;head&gt;&#xA;    &lt;title&gt;Eingabeformular&lt;/title&gt;&#xA;&lt;/head&gt;&#xA;&lt;body&gt;&#xA;    &lt;h1&gt;Eingabeformular&lt;/h1&gt;&#xA;    &#xA;    &lt;form id=&#34;inputForm&#34;&gt;&#xA;        &lt;label for=&#34;name&#34;&gt;Name:&lt;/label&gt;&lt;br&gt;&#xA;        &lt;input type=&#34;text&#34; id=&#34;name&#34; name=&#34;name&#34;&gt;&lt;br&gt;&lt;br&gt;&#xA;&#xA;        &lt;label for=&#34;organization&#34;&gt;Organisation:&lt;/label&gt;&lt;br&gt;&#xA;        &lt;input type=&#34;text&#34; id=&#34;organization&#34; name=&#34;organization&#34;&gt;&lt;br&gt;&lt;br&gt;&#xA;&#xA;        &lt;label for=&#34;city&#34;&gt;Stadt:&lt;/label&gt;&lt;br&gt;&#xA;        &lt;input type=&#34;text&#34; id=&#34;city&#34; name=&#34;city&#34;&gt;&lt;br&gt;&lt;br&gt;&#xA;&#xA;        &lt;label for=&#34;state&#34;&gt;Bundesland:&lt;/label&gt;&lt;br&gt;&#xA;        &lt;input type=&#34;text&#34; id=&#34;state&#34; name=&#34;state&#34;&gt;&lt;br&gt;&lt;br&gt;&#xA;&#xA;        &lt;label for=&#34;country&#34;&gt;Land:&lt;/label&gt;&lt;br&gt;&#xA;        &lt;input type=&#34;text&#34; id=&#34;country&#34; name=&#34;country&#34;&gt;&lt;br&gt;&lt;br&gt;&#xA;&#xA;        &lt;textarea id=&#34;info&#34; rows=&#34;6&#34; cols=&#34;50&#34;&gt;&lt;/textarea&gt;&lt;br&gt;&#xA;&#xA;        &lt;button type=&#34;button&#34; onclick=&#34;displayInfo()&#34;&gt;Befehl erzeugen&lt;/button&gt;&#xA;        &lt;button type=&#34;button&#34; onclick=&#34;copyToClipboard()&#34;&gt;In Zwischenablage kopieren&lt;/button&gt;&#xA;    &lt;/form&gt;&#xA;&#xA;    &#xA;&#xA;    &lt;script&gt;&#xA;        function displayInfo() {&#xA;            const name = document.getElementById(&#39;name&#39;).value;&#xA;            const organization = document.getElementById(&#39;organization&#39;).value;&#xA;            const city = document.getElementById(&#39;city&#39;).value;&#xA;            const state = document.getElementById(&#39;state&#39;).value;&#xA;            const country = document.getElementById(&#39;country&#39;).value;&#xA;            const path_openssl = document.getElementById(&#39;path_openssl&#39;).value;&#xA;&#xA;            const info = `${path_openssl} req -new -newkey rsa:2048 -sha256 -nodes -out &#34;/Users/janschmitz/certs/${name}.csr&#34; -keyout &#34;/Users/janschmitz/certs/${name}.key&#34; -subj &#34;/C=${country}/ST=${state}/L=${city}/O=${organization}/CN=${name}&#34;`;&#xA;            &#xA;            document.getElementById(&#39;info&#39;).value = info;&#xA;        }&#xA;&#xA;        function copyToClipboard() {&#xA;            const infoText = document.getElementById(&#39;info&#39;);&#xA;            infoText.select();&#xA;            document.execCommand(&#39;copy&#39;);&#xA;        }&#xA;    &lt;/script&gt;&#xA;&#xA;&lt;h1&gt;Textdateien erstellen und speichern&lt;/h1&gt;&#xA;    &#xA;&lt;form id=&#34;textFileForm&#34;&gt;&#xA;    &lt;label for=&#34;text1&#34;&gt;CRT eingeben:&lt;/label&gt;&lt;br&gt;&#xA;    &lt;textarea id=&#34;text1&#34; name=&#34;text1&#34; rows=&#34;4&#34; cols=&#34;50&#34;&gt;&lt;/textarea&gt;&lt;br&gt;&lt;br&gt;&#xA;&#xA;    &lt;label for=&#34;text2&#34;&gt;CA CRT eingeben:&lt;/label&gt;&lt;br&gt;&#xA;    &lt;textarea id=&#34;text2&#34; name=&#34;text2&#34; rows=&#34;4&#34; cols=&#34;50&#34;&gt;&lt;/textarea&gt;&lt;br&gt;&lt;br&gt;&#xA;    &#xA;    &lt;button type=&#34;button&#34; onclick=&#34;saveCRTFile()&#34;&gt;CRT speichern&lt;/button&gt;&#xA;    &lt;button type=&#34;button&#34; onclick=&#34;saveCACRTFile()&#34;&gt;CA CRT speichern&lt;/button&gt;&lt;br&gt;&lt;br&gt;&#xA;    &lt;button type=&#34;button&#34; onclick=&#34;displayInfoPFX()&#34;&gt;PFX befehl erstellen&lt;/button&gt;&#xA;    &lt;button type=&#34;button&#34; onclick=&#34;copyToClipboardPFX()&#34;&gt;PFX kopieren&lt;/button&gt;&lt;br&gt;&lt;br&gt;&#xA;&#xA;    &lt;textarea id=&#34;PFX&#34; rows=&#34;6&#34; cols=&#34;50&#34;&gt;&lt;/textarea&gt;&lt;br&gt;&#xA;&lt;/form&gt;&#xA;&#xA;&lt;script&gt;&#xA;    function saveCRTFile() {&#xA;        const textId = &#39;text1&#39;;&#xA;        const name = &#39;name&#39;;&#xA;&#xA;        const text = document.getElementById(textId).value;&#xA;        const filename = document.getElementById(name).value;&#xA;&#xA;        if (text.trim() === &#39;&#39;) {&#xA;            alert(&#39;Bitte gib den CRT ein.&#39;);&#xA;            return;&#xA;        }&#xA;&#xA;        if (name.trim() === &#39;&#39;) {&#xA;            alert(&#39;Bitte gib die Domain ein.&#39;);&#xA;            return;&#xA;        }&#xA;&#xA;        const blob = new Blob([text], { type: &#39;text/plain&#39; });&#xA;        const a = document.createElement(&#39;a&#39;);&#xA;        a.href = URL.createObjectURL(blob);&#xA;        a.download = filename + &#39;.crt&#39;;&#xA;        a.style.display = &#39;none&#39;;&#xA;        document.body.appendChild(a);&#xA;        a.click();&#xA;        document.body.removeChild(a);&#xA;    }&#xA;&#xA;    function saveCACRTFile() {&#xA;        const textId = &#39;text2&#39;;&#xA;        const name = &#39;name&#39;;&#xA;&#xA;        const text = document.getElementById(textId).value;&#xA;        const filename = document.getElementById(name).value;&#xA;&#xA;        if (text.trim() === &#39;&#39;) {&#xA;            alert(&#39;Bitte gib den CA CRT ein.&#39;);&#xA;            return;&#xA;        }&#xA;&#xA;        if (name.trim() === &#39;&#39;) {&#xA;            alert(&#39;Bitte gib die Domain ein.&#39;);&#xA;            return;&#xA;        }&#xA;&#xA;        const blob = new Blob([text], { type: &#39;text/plain&#39; });&#xA;        const a = document.createElement(&#39;a&#39;);&#xA;        a.href = URL.createObjectURL(blob);&#xA;        a.download = filename + &#39;_intermediate.crt&#39;;&#xA;        a.style.display = &#39;none&#39;;&#xA;        document.body.appendChild(a);&#xA;        a.click();&#xA;        document.body.removeChild(a);&#xA;    }&#xA;&#xA;    function displayInfoPFX() {&#xA;            const name = document.getElementById(&#39;name&#39;).value;&#xA;            const path_openssl = document.getElementById(&#39;path_openssl&#39;).value;&#xA;            const path_cert = document.getElementById(&#39;Ablage_Zertifikate&#39;).value;&#xA;&#xA;            if (name.trim() === &#39;&#39;) {&#xA;            alert(&#39;Bitte gib die Domain ein.&#39;);&#xA;            return;&#xA;            }&#xA;&#xA;            const info = `${path_openssl} pkcs12 -export -out &#34;${path_cert}/${name}.pfx&#34; -inkey &#34;${path_cert}/${name}.key&#34; -in &#34;${path_cert}/${name}.crt&#34; -certfile &#34;${path_cert}/${name}_Intermediate.crt&#34;`;&#xA;            &#xA;            document.getElementById(&#39;PFX&#39;).value = info;&#xA;        }&#xA;&#xA;        function copyToClipboardPFX() {&#xA;            const infoText = document.getElementById(&#39;PFX&#39;);&#xA;            infoText.select();&#xA;            document.execCommand(&#39;copy&#39;);&#xA;        }&#xA;&#xA;&lt;/script&gt;&#xA;&#xA;&lt;form id=&#34;inputForm&#34;&gt;&#xA;&#xA;    &lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&#xA;    &lt;label for=&#34;path_openssl&#34;&gt;Openssl:&lt;/label&gt;&lt;br&gt;&#xA;    &lt;input type=&#34;text&#34; id=&#34;path_openssl&#34; name=&#34;path_openssl&#34; value=&#34;openssl&#34;&gt;&lt;br&gt;&lt;br&gt;&#xA;&#xA;    &lt;label for=&#34;Ablage_Zertifikate&#34;&gt;Ablage_Zertifikate:&lt;/label&gt;&lt;br&gt;&#xA;    &lt;input type=&#34;text&#34; id=&#34;Ablage_Zertifikate&#34; name=&#34;Ablage_Zertifikate&#34; value=&#34;/Users/janschmitz/certs&#34;&gt;&lt;br&gt;&lt;br&gt;&#xA;&lt;/form&gt;&#xA;&lt;/body&gt;&#xA;&lt;/html&gt;</description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/home/home/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/home/home/</guid>
      <description>&lt;p&gt;&lt;strong&gt;Willkommen auf meinem IT-Blog – Lösungen, die funktionieren.&lt;/strong&gt;&lt;/p&gt;&#xA;&lt;p&gt;Ob fehlerhafte Gruppenrichtlinien, hartnäckige Probleme mit Microsoft Intune, Performancefragen unter macOS oder ungeklärte Warnungen in Server-Eye – in der IT gibt es selten Stillstand, aber oft viele Fragen.&lt;/p&gt;&#xA;&lt;p&gt;Dieser Blog ist für alle, die in der IT Verantwortung tragen – Admins, Techniker, oder ambitionierte IT-Enthusiasten. Hier findest du praxisnahe Lösungen, klare Anleitungen und hilfreiche Workarounds für alltägliche (und weniger alltägliche) IT-Probleme rund um Windows, macOS, Intune, Server-Eye und mehr.&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/posts/commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/commands/</guid>
      <description>&lt;h1 id=&#34;dateien-synchronisieren&#34;&gt;Dateien Synchronisieren&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rsync -av --delete /users/janschmitz/documents/Obsidian/Blog/posts /users/janschmitz/documents/hugo/jasblog/content&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;hugo-server-starten&#34;&gt;Hugo Server starten&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo server -t terminal&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;zu-richtigem-pfad-wechseln&#34;&gt;zu richtigem Pfad wechseln&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd /users/janschmitz/documents/hugo/jasblog&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/posts/erster-post/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/erster-post/</guid>
      <description>&lt;p&gt;#HalloWelt&lt;/p&gt;&#xA;&lt;p&gt;Mein Erster Post auf meiner eigenen Seite&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/posts/mega-skript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/mega-skript/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash set -euo pipefail # Change to the script&amp;#39;s directory SCRIPT_DIR=&amp;#34;$(cd &amp;#34;$(dirname &amp;#34;${BASH_SOURCE[0]}&amp;#34;)&amp;#34; &amp;amp;&amp;amp; pwd)&amp;#34; cd &amp;#34;$SCRIPT_DIR&amp;#34; # Set variables for Obsidian to Hugo copy sourcePath=&amp;#34;/Users/path/to/obsidian/posts&amp;#34; destinationPath=&amp;#34;/Users/path/to/hugo/posts&amp;#34; # Set GitHub Repo myrepo=&amp;#34;reponame&amp;#34; # Check for required commands for cmd in git rsync python3 hugo; do if ! command -v $cmd &amp;amp;&amp;gt; /dev/null; then echo &amp;#34;$cmd is not installed or not in PATH.&amp;#34; exit 1 fi done # Step 1: Check if Git is initialized, and initialize if necessary if [ ! -d &amp;#34;.git&amp;#34; ]; then echo &amp;#34;Initializing Git repository...&amp;#34; git init git remote add origin $myrepo else echo &amp;#34;Git repository already initialized.&amp;#34; if ! git remote | grep -q &amp;#39;origin&amp;#39;; then echo &amp;#34;Adding remote origin...&amp;#34; git remote add origin $myrepo fi fi # Step 2: Sync posts from Obsidian to Hugo content folder using rsync echo &amp;#34;Syncing posts from Obsidian...&amp;#34; if [ ! -d &amp;#34;$sourcePath&amp;#34; ]; then echo &amp;#34;Source path does not exist: $sourcePath&amp;#34; exit 1 fi if [ ! -d &amp;#34;$destinationPath&amp;#34; ]; then echo &amp;#34;Destination path does not exist: $destinationPath&amp;#34; exit 1 fi rsync -av --delete &amp;#34;$sourcePath&amp;#34; &amp;#34;$destinationPath&amp;#34; # Step 3: Process Markdown files with Python script to handle image links echo &amp;#34;Processing image links in Markdown files...&amp;#34; if [ ! -f &amp;#34;images.py&amp;#34; ]; then echo &amp;#34;Python script images.py not found.&amp;#34; exit 1 fi if ! python3 images.py; then echo &amp;#34;Failed to process image links.&amp;#34; exit 1 fi # Step 4: Build the Hugo site echo &amp;#34;Building the Hugo site...&amp;#34; if ! hugo; then echo &amp;#34;Hugo build failed.&amp;#34; exit 1 fi # Step 5: Add changes to Git echo &amp;#34;Staging changes for Git...&amp;#34; if git diff --quiet &amp;amp;&amp;amp; git diff --cached --quiet; then echo &amp;#34;No changes to stage.&amp;#34; else git add . fi # Step 6: Commit changes with a dynamic message commit_message=&amp;#34;New Blog Post on $(date +&amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;)&amp;#34; if git diff --cached --quiet; then echo &amp;#34;No changes to commit.&amp;#34; else echo &amp;#34;Committing changes...&amp;#34; git commit -m &amp;#34;$commit_message&amp;#34; fi # Step 7: Push all changes to the main branch echo &amp;#34;Deploying to GitHub Main...&amp;#34; if ! git push origin main; then echo &amp;#34;Failed to push to main branch.&amp;#34; exit 1 fi # Step 8: Push the public folder to the hostinger branch using subtree split and force push echo &amp;#34;Deploying to GitHub Hostinger...&amp;#34; if git branch --list | grep -q &amp;#39;hostinger-deploy&amp;#39;; then git branch -D hostinger-deploy fi if ! git subtree split --prefix public -b hostinger-deploy; then echo &amp;#34;Subtree split failed.&amp;#34; exit 1 fi if ! git push origin hostinger-deploy:hostinger --force; then echo &amp;#34;Failed to push to hostinger branch.&amp;#34; git branch -D hostinger-deploy exit 1 fi git branch -D hostinger-deploy echo &amp;#34;All done! Site synced, processed, committed, built, and deployed.&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
