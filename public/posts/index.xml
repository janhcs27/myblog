<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>Posts on </title>
    <link>//localhost:1313/posts/</link>
    <description>Recent content in Posts on </description>
    <generator>Hugo</generator>
    <language>en</language>
    <atom:link href="//localhost:1313/posts/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title></title>
      <link>//localhost:1313/posts/commands/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/commands/</guid>
      <description>&lt;h1 id=&#34;dateien-synchronisieren&#34;&gt;Dateien Synchronisieren&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;rsync -av --delete /users/janschmitz/documents/Obsidian/Blog/posts /users/janschmitz/documents/hugo/jasblog/content&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;hugo-server-starten&#34;&gt;Hugo Server starten&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;hugo server -t terminal&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;h1 id=&#34;zu-richtigem-pfad-wechseln&#34;&gt;zu richtigem Pfad wechseln&lt;/h1&gt;&#xA;&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;cd /users/janschmitz/documents/hugo/jasblog&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/posts/erster-post/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/erster-post/</guid>
      <description>&lt;p&gt;#HalloWelt&lt;/p&gt;&#xA;&lt;p&gt;Mein Erster Post auf meiner eigenen Seite&lt;/p&gt;</description>
    </item>
    <item>
      <title></title>
      <link>//localhost:1313/posts/mega-skript/</link>
      <pubDate>Mon, 01 Jan 0001 00:00:00 +0000</pubDate>
      <guid>//localhost:1313/posts/mega-skript/</guid>
      <description>&lt;pre tabindex=&#34;0&#34;&gt;&lt;code&gt;#!/bin/bash set -euo pipefail # Change to the script&amp;#39;s directory SCRIPT_DIR=&amp;#34;$(cd &amp;#34;$(dirname &amp;#34;${BASH_SOURCE[0]}&amp;#34;)&amp;#34; &amp;amp;&amp;amp; pwd)&amp;#34; cd &amp;#34;$SCRIPT_DIR&amp;#34; # Set variables for Obsidian to Hugo copy sourcePath=&amp;#34;/Users/path/to/obsidian/posts&amp;#34; destinationPath=&amp;#34;/Users/path/to/hugo/posts&amp;#34; # Set GitHub Repo myrepo=&amp;#34;reponame&amp;#34; # Check for required commands for cmd in git rsync python3 hugo; do if ! command -v $cmd &amp;amp;&amp;gt; /dev/null; then echo &amp;#34;$cmd is not installed or not in PATH.&amp;#34; exit 1 fi done # Step 1: Check if Git is initialized, and initialize if necessary if [ ! -d &amp;#34;.git&amp;#34; ]; then echo &amp;#34;Initializing Git repository...&amp;#34; git init git remote add origin $myrepo else echo &amp;#34;Git repository already initialized.&amp;#34; if ! git remote | grep -q &amp;#39;origin&amp;#39;; then echo &amp;#34;Adding remote origin...&amp;#34; git remote add origin $myrepo fi fi # Step 2: Sync posts from Obsidian to Hugo content folder using rsync echo &amp;#34;Syncing posts from Obsidian...&amp;#34; if [ ! -d &amp;#34;$sourcePath&amp;#34; ]; then echo &amp;#34;Source path does not exist: $sourcePath&amp;#34; exit 1 fi if [ ! -d &amp;#34;$destinationPath&amp;#34; ]; then echo &amp;#34;Destination path does not exist: $destinationPath&amp;#34; exit 1 fi rsync -av --delete &amp;#34;$sourcePath&amp;#34; &amp;#34;$destinationPath&amp;#34; # Step 3: Process Markdown files with Python script to handle image links echo &amp;#34;Processing image links in Markdown files...&amp;#34; if [ ! -f &amp;#34;images.py&amp;#34; ]; then echo &amp;#34;Python script images.py not found.&amp;#34; exit 1 fi if ! python3 images.py; then echo &amp;#34;Failed to process image links.&amp;#34; exit 1 fi # Step 4: Build the Hugo site echo &amp;#34;Building the Hugo site...&amp;#34; if ! hugo; then echo &amp;#34;Hugo build failed.&amp;#34; exit 1 fi # Step 5: Add changes to Git echo &amp;#34;Staging changes for Git...&amp;#34; if git diff --quiet &amp;amp;&amp;amp; git diff --cached --quiet; then echo &amp;#34;No changes to stage.&amp;#34; else git add . fi # Step 6: Commit changes with a dynamic message commit_message=&amp;#34;New Blog Post on $(date +&amp;#39;%Y-%m-%d %H:%M:%S&amp;#39;)&amp;#34; if git diff --cached --quiet; then echo &amp;#34;No changes to commit.&amp;#34; else echo &amp;#34;Committing changes...&amp;#34; git commit -m &amp;#34;$commit_message&amp;#34; fi # Step 7: Push all changes to the main branch echo &amp;#34;Deploying to GitHub Main...&amp;#34; if ! git push origin main; then echo &amp;#34;Failed to push to main branch.&amp;#34; exit 1 fi # Step 8: Push the public folder to the hostinger branch using subtree split and force push echo &amp;#34;Deploying to GitHub Hostinger...&amp;#34; if git branch --list | grep -q &amp;#39;hostinger-deploy&amp;#39;; then git branch -D hostinger-deploy fi if ! git subtree split --prefix public -b hostinger-deploy; then echo &amp;#34;Subtree split failed.&amp;#34; exit 1 fi if ! git push origin hostinger-deploy:hostinger --force; then echo &amp;#34;Failed to push to hostinger branch.&amp;#34; git branch -D hostinger-deploy exit 1 fi git branch -D hostinger-deploy echo &amp;#34;All done! Site synced, processed, committed, built, and deployed.&amp;#34;&#xA;&lt;/code&gt;&lt;/pre&gt;</description>
    </item>
  </channel>
</rss>
